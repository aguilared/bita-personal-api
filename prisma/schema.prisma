// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Post {
  id        Int     @default(autoincrement()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  password      String?
  nivel         Int
  posts         Post[]
  bitacora      Bitacora[]
  @@map(name: "users")
}

model Bitacora {
  id             Int       @default(autoincrement()) @id
  bitacora_date  String?
  author         User?     @relation(fields: [author_id], references: [id])
  author_id      Int? 
  created_at     DateTime  @default(now()) @map(name: "created_at")
  updated_at     DateTime  @updatedAt @map(name: "updated_at")
  bita_events    BitaEvents[]  // A Bitacora can have many Bitaevents
  @@map(name: "bitacoras")
}

model BitaEvents {
  id             Int         @default(autoincrement()) @id
  bitacora       Bitacora?   @relation(fields: [bitacora_id], references: [id])
  bitacora_id    Int?
  event_date     String?
  tipoEvent      TipoEvent?  @relation(fields: [tipo_event_id], references: [id])
  tipo_event_id  Int?
  event          Event?      @relation(fields: [events_id], references: [id])
  events_id      Int?
  description    String?
  created_at     DateTime  @default(now()) @map(name: "created_at")
  updated_at     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "bita_events")
}

model TipoEvent {
  id           Int       @default(autoincrement()) @id
  description  String?
  created_at   DateTime  @default(now()) @map(name: "created_at")
  updated_at   DateTime  @updatedAt @map(name: "updated_at")
  bita_events  BitaEvents[]  // A TipoEvent can have many Bitaevents
  events       Event[]  // A TipoEvent can have many Events
  @@map(name: "tipo_events")
}

model Event {
  id            Int          @default(autoincrement()) @id
  description   String?
  tipoEvent      TipoEvent?  @relation(fields: [tipo_event_id], references: [id])
  tipo_event_id  Int?
  created_at    DateTime     @default(now()) @map(name: "created_at")
  updated_at    DateTime     @updatedAt @map(name: "updated_at")
  bita_events  BitaEvents[]  // A Event can have many Bitaevents
  @@map(name: "events")
}
